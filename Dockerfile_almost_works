# Use a base image
FROM ubuntu:latest

ENV DEBIAN_FRONTEND noninteractive

# Install essential packages
RUN apt-get -y update && apt-get install -y autoconf automake gcc g++ make gfortran wget curl

# Set environment variables
ENV MPICH_VERSION=3.4 \
    PATH=/usr/bin:/usr/local/bin:/bin:/app \
    DEBIAN_FRONTEND=noninteractive \
    TZ=America/Los_Angeles

# Install MPICH
RUN cd /usr/local/src/ && \
    wget http://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz && \
    tar xf mpich-${MPICH_VERSION}.tar.gz && \
    rm mpich-${MPICH_VERSION}.tar.gz && \
    cd mpich-${MPICH_VERSION} && \
    ./configure --with-device=ch4:ofi --enable-fortran=no --enable-static=no && \
    make -j 4 && make install && \
    cd /usr/local/src && \
    rm -rf mpich-${MPICH_VERSION}

# Install build dependencies
RUN apt-get update && \
    apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev wget curl llvm \
    libncurses5-dev libncursesw5-dev xz-utils tk-dev \
    libffi-dev liblzma-dev python3-openssl git

# Download and extract Python 3.8 source code
RUN mkdir ~/python38 && \
    cd ~/python38 && \
    wget https://www.python.org/ftp/python/3.8.16/Python-3.8.16.tgz && \
    tar -xf Python-3.8.16.tgz

# Configure the build
RUN cd ~/python38/Python-3.8.16 && \
    ./configure --enable-optimizations --enable-shared

# Compile the source code
RUN cd ~/python38/Python-3.8.16 && \
    make -j$(nproc)

# Install Python
RUN cd ~/python38/Python-3.8.16 && \
    make install

# Update OS and install packages
RUN apt-get update && \
    apt-get install --yes build-essential gfortran \ 
    #python3-dev \
    python3-pip wget && \
    apt-get clean all

# Set up for NEURON
RUN apt-get install -y locales autoconf automake gcc g++ make vim ssh git emacs aptitude build-essential xterm iputils-ping net-tools screen graphviz && \
    apt-get clean all

# Install tzdata
RUN apt-get install -y tzdata

# More libs for NEURON
RUN apt-get install -y libgraphviz-dev pkg-config expat zlib1g-dev libncurses5-dev libncursesw5-dev python3-tk && \
    apt-get clean all

# Install necessary tools including Bison and Flex
RUN apt-get update && apt-get install -y \
    cmake \
    bison \
    flex

# Install user management tools
RUN apt-get update && apt-get install -y

# Create a virtual environment
RUN python3.8 -m venv /opt/venv

# # Install Cython using pip
# # Install a compatible version of Cython
# RUN /opt/venv/bin/pip install Cython==0.29.24 numpy

# # Clone NEURON source code from the official repository
# RUN git clone https://github.com/neuronsimulator/nrn.git /opt/nrn && \
#     mkdir /opt/nrn/build

# # Configure NEURON with Python support
# RUN cd /opt/nrn/build && \
#     cmake .. \
#       -DNRN_ENABLE_PYTHON=ON \
#       -DPYTHON_EXECUTABLE=/opt/venv/bin/python \
#       -DNRN_ENABLE_INTERVIEWS=OFF \
#       -DNRN_ENABLE_MPI=ON \
#       -DCMAKE_INSTALL_PREFIX=/opt/nrn/install

# # Build and install NEURON
# RUN cd /opt/nrn/build && \
#     make && \
#     make install

# # Add NEURON to the PATH
# ENV PATH="/opt/nrn/install/bin:${PATH}"

# # Add NEURON to Python path
# ENV PYTHONPATH="/opt/nrn/install/lib/python:${PYTHONPATH}"

# Install essential Python libraries
RUN /opt/venv/bin/pip install \
    numpy \
    matplotlib h5py ruamel.yaml jupyter jupyter_server scipy six bluepyopt \
    neuron \
    netpyne Igor

# Upgrade Pillow
RUN /opt/venv/bin/pip install --upgrade Pillow

# Install additional Python packages
RUN /opt/venv/bin/pip install bokeh contextlib2 cycler fonttools future jinja2 kiwisolver lfpykit markupsafe matplotlib-scalebar meautility packaging pandas pyparsing pytz pyyaml schema tornado

# Install mpi4py
RUN /opt/venv/bin/python -m pip install mpi4py

#Install remaining batchRun.py dependencies

# Prepare a writable directory for Fontconfig cache
RUN mkdir /opt/fontconfig && \
    chmod 777 /opt/fontconfig

# Set environment variable for Fontconfig to use the new cache directory
ENV FONTCONFIG_PATH=/opt/fontconfig

# Activate the virtual environment by default
ENV PATH="/opt/venv/bin:$PATH"

#add neuron to python path
ENV PYTHONPATH opt/venv/bin/nrniv:$PYTHONPATH

# Create a non-root user
#RUN useradd -m myuser -d /opt/myuser

# Set HOME environment variable
#ENV HOME=/opt/myuser

WORKDIR /app

# # Make the home directory writable
# RUN chmod a+w /opt/myuser
RUN chmod -R o+w /opt \
    && fc-cache --really-force --verbose

# # Switch to the non-root user
# USER myuser

# Set default command
CMD ["bash"]

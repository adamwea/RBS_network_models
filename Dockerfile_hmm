# Use a base image
FROM ubuntu:22.04

WORKDIR /opt

# Set noninteractive installation mode and timezone
ENV DEBIAN_FRONTEND noninteractive
ENV TZ=America/Los_Angeles

# Install all necessary packages in one step
RUN apt-get update && apt-get install -y \
    autoconf automake gcc g++ make gfortran wget curl libevent-dev hwloc libhwloc-dev pandoc \
    libfabric-dev libpsm-infinipath1-dev libpsm2-dev librdmacm-dev libibverbs-dev libslurm-dev \
    build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \
    llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev git \
    locales vim ssh emacs aptitude xterm iputils-ping net-tools screen graphviz tzdata \
    libgraphviz-dev pkg-config expat python3-openssl python3-tk && \
    apt-get clean all && rm -rf /var/lib/apt/lists/*

#Install pmi packages
RUN which find
RUN apt-get update && apt-get install -y \
    libpmi0-dev libpmix-dev  

# Update SSL certificates
# Install dependencies
RUN apt-get update && apt-get install -y \
    wget \
    build-essential \
    libssl-dev \
    libffi-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    libncurses5-dev \
    libgdbm-dev \
    libnss3-dev \
    liblzma-dev \
    libdb-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# # Keep the container running
# RUN sleep infinity

ENV PATH="/usr/local/sbin:/usr/local/bin:$PATH"
RUN echo $PATH
RUN export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH &&\
    export C_INCLUDE_PATH=/usr/include/slurm:/usr/lib/x86_64-linux-gnu/pmix2/include:$C_INCLUDE_PATH &&\
    export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu/pmix2/lib:$LIBRARY_PATH
#RUN ln -s /usr/lib/x86_64-linux-gnu/libpmi2.so /usr/lib/x86_64-linux-gnu/libpmi.so
RUN find /usr -name '*pmi*' -print
RUN find /usr -name pmi.h -print && \
    find /usr -name libpmi.so -print && \
    find /usr -name libpmix2.so -print && \
    find /usr -name slurm -print

# Keep the container running
#RUN sleep infinity

# Set environment variables
ENV PATH="/usr/local/bin:/usr/bin:/bin:/app:$PATH"
ENV LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"

# Install Python 3.7
RUN mkdir ~/python37 && \
    cd ~/python37 && \
    wget https://www.python.org/ftp/python/3.7.12/Python-3.7.12.tgz && \
    tar -xf Python-3.7.12.tgz && \
    cd Python-3.7.12 && \
    ./configure --enable-optimizations --enable-shared && \
    #make -j$(nproc) && \
    make -j4 && \
    make install

# Create a symbolic link to the Python 3.7 binary, and check the Python version
RUN ln -s /usr/bin/python3 /usr/bin/python
RUN ln -sf /usr/local/bin/python3.7 /usr/bin/python
RUN python --version && which python

ENV PYTHONUNBUFFERED=1

# Install python3-openssl and python3-tk
RUN apt-get update && apt-get install -y python3-openssl python3-tk && \
    apt-get clean all && rm -rf /var/lib/apt/lists/*

# Install MPICH
ENV MPICH_VERSION=4.1.1
#ENV PREFIX="$HOME/mpich2"
ENV PREFIX="/opt/mpich"
RUN mkdir -p ${PREFIX} && chmod a+rwx ${PREFIX}
RUN echo "Installing MPICH version ${MPICH_VERSION} to ${PREFIX}..."

# Keep the container running
#RUN sleep infinity

# Notes:
#--with-device=ch3:nemesis && \ # Nemesis is particularly effective for intra-node (within the same node) communication, making it beneficial for multi-processor or multi-core platforms where shared memory communication can be optimized.
#--with-device=ch4 OFI is optimized for both intra-node and inter-node (between nodes) communication, making it suitable for large-scale distributed systems like Perlmutter at NERSC.
#RUN find /usr -name pmi.h -print
#RUN find /usr -name libpmi.so -print
RUN find /usr -name '*pmi*' -print
RUN find / -name libpmi.la -print
#RUN sleep infinity
RUN \
    wget http://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz -P /tmp/ && \
    tar xf /tmp/mpich-${MPICH_VERSION}.tar.gz -C /tmp/ && \
    cd /tmp/mpich-${MPICH_VERSION} && \
    ./configure --prefix=${PREFIX} \
    #--datarootdir=${PREFIX}/share 
    --enable-fortran=no \
    --with-device=ch3:nemesis \
    #--with-device=ch4:ofi \
    ##--with-pmi=/usr \
    # --with-pmi-include=/usr/include/slurm \
    # --with-pmi-lib=/usr/lib/x86_64-linux-gnu && \
    ##--with-pmix=/usr \
    # --with-pmix-include=/usr/lib/x86_64-linux-gnu/pmix2/include \
    # --with-pmix-lib=/usr/lib/x86_64-linux-gnu/pmix2 \
    # --with-pm=hydra \
    # && make -j$(nproc) && \
    && make -j4 && \
    make install && \
    rm -rf /tmp/mpich-${MPICH_VERSION} /tmp/mpich-${MPICH_VERSION}.tar.gz

RUN /sbin/ldconfig
ENV PATH="${PREFIX}/bin:$PATH"
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

# WORKDIR /app

# # Set default command
# CMD ["bash"]

# # Set environment variables for MPICH
# ENV PATH="${PREFIX}/bin:$PATH"
# ENV LD_LIBRARY_PATH="${PREFIX}/lib:$LD_LIBRARY_PATH"
# ENV MODULEPATH="${PREFIX}/share/modulefiles:$MODULEPATH"

# # Manual creation of a simple environment module file
# RUN mkdir -p ${PREFIX}/share/modulefiles && \
#     echo '#%Module1.0' > ${PREFIX}/share/modulefiles/mpich && \
#     echo 'proc ModulesHelp { } {' >> ${PREFIX}/share/modulefiles/mpich && \
#     echo '    puts stderr "This module sets up the environment for MPICH ${MPICH_VERSION}."' >> ${PREFIX}/share/modulefiles/mpich && \
#     echo '}' >> ${PREFIX}/share/modulefiles/mpich && \
#     echo 'module-whatis "Sets up the environment for MPICH ${MPICH_VERSION}"' >> ${PREFIX}/share/modulefiles/mpich && \
#     echo "set prefix ${PREFIX}" >> ${PREFIX}/share/modulefiles/mpich && \
#     echo 'prepend-path PATH $prefix/bin' >> ${PREFIX}/share/modulefiles/mpich && \
#     echo 'prepend-path LD_LIBRARY_PATH $prefix/lib' >> ${PREFIX}/share/modulefiles/mpich && \
#     echo 'prepend-path MANPATH $prefix/share/man' >> ${PREFIX}/share/modulefiles/mpich && \
#     echo 'prepend-path CPATH $prefix/include' >> ${PREFIX}/share/modulefiles/mpich && \
#     echo 'prepend-path PKG_CONFIG_PATH $prefix/lib/pkgconfig' >> ${PREFIX}/share/modulefiles/mpich

# # Installation Checks
# # Check if mpiexec and mpicc are available
# RUN command -v mpiexec && command -v mpicc
# # Verify the environment module file is present
# RUN test -f ${PREFIX}/share/modulefiles/mpich
# # Check if the module file paths are correct
# RUN grep "${PREFIX}" ${PREFIX}/share/modulefiles/mpich

# # Create a simple MPI program for testing
# RUN echo '#include <mpi.h>\n#include <stdio.h>\nint main(int argc, char** argv) {\nMPI_Init(NULL, NULL);\nint world_size;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nint world_rank;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nprintf("Hello world from rank %d out of %d processors\\n", world_rank, world_size);\nMPI_Finalize();\nreturn 0;\n}' > test_mpi.c
# # Compile the simple MPI program
# RUN mpicc -o test_mpi test_mpi.c
# # Run the simple MPI program
# RUN mpiexec -n 2 ./test_mpi

# # Clean up
# RUN rm test_mpi.c test_mpi

# # Keep the container running
# RUN sleep infinity

# Install necessary packages for building NEURON
RUN apt-get update && apt-get install -y \
    wget curl git \
    cmake bison flex \
    build-essential \
    libncurses-dev \
    libreadline-dev \
    libx11-dev \
    python3-dev python3-pip
    #libopenmpi-dev

RUN python -m pip install --upgrade pip
RUN pip install 'cython<3'
RUN pip install numpy

# Install C and C++ compilers that support C++17
RUN apt-get install -y gcc-9 g++-9 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9

# Clone the NEURON repository
RUN git clone https://github.com/neuronsimulator/nrn.git /opt/nrn && \
    cd /opt/nrn && \
    git checkout tags/8.2.4  # Adjust the tag as per your specific version requirement

# Configure NEURON using CMake
RUN mkdir /opt/nrn/build && cd /opt/nrn/build && \
    cmake .. \
    -DNRN_ENABLE_INTERVIEWS=OFF \
    -DNRN_ENABLE_PYTHON=ON \
    -DNRN_ENABLE_CORENEURON=ON \
    -DPYTHON_EXECUTABLE="/usr/local/bin/python3.8" \
    -DNRN_ENABLE_MPI=ON \
    -DCMAKE_INSTALL_PREFIX="/opt/neuron"
    #-DCMAKE_PREFIX_PATH="/usr/local/ncurses"

# Build and install NEURON
RUN cd /opt/nrn/build && \
    make -j$(nproc) && \
    make install

# Set environment variables
ENV PATH="/opt/neuron/bin:$PATH" \
    PYTHONPATH="/opt/neuron/lib/python:$PYTHONPATH"

#NEURON will try to find MPI library in the standard library paths (e.g. /usr/lib). But on some systems MPI libraries may not be in standard path. 
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

# Cleanup
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Keep the container running
#RUN sleep infinity

# Install Python packages

RUN python -m pip install \
    numpy matplotlib h5py ruamel.yaml jupyter jupyter_server scipy six bluepyopt \
    netpyne Pillow 'bokeh<3' contextlib2 cycler fonttools future jinja2 kiwisolver lfpykit \
    markupsafe matplotlib-scalebar meautility packaging pandas pyparsing pytz pyyaml schema tornado inspyred \
    wheel setuptools setuptools_scm scikit-build ipython packaging 'pytest<=8.1.1' pytest-cov find_libpython
    
#install mpi4py
RUN python -m pip install mpi4py

# Create a writable directory for Fontconfig cache and other usage
RUN mkdir /opt/fontconfig /app && \
    chmod -R 777 /opt/fontconfig /app

# Set environment variable for Fontconfig
ENV FONTCONFIG_PATH=/opt/fontconfig

# Set environment variables for MPICH
#ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
# ENV MPIR_CVAR_CH3_NOLOCAL=0
# ENV MPIR_CVAR_CH4_NOLOCAL=0
ENV RDMAV_FORK_SAFE=1

WORKDIR /app

# Set default command
CMD ["bash"]

# Create a non-root user
# RUN apt-get update && apt-get install -y passwd
# RUN apt-get clean && rm -rf /var/lib/apt/lists/*
# #RUN groupadd -r mpiuser && useradd -r -g mpiuser -m -d /home/mpiuser -s /bin/bash mpiuser
# ENV PATH="$PATH:/sbin:/usr/sbin:usr/local/sbin"
# RUN adduser --disabled-password --gecos '' --shell /bin/bash --uid 500 mpiuser
# RUN chown -R mpiuser:mpiuser /app \ 
#     /boot  /lib    /lib64   /media  /opt  /sbin  /usr \
#     /dev   /home  /lib32  /libx32  /mnt  /run   /srv  /root

# #simulate NERSC permissions
# # RUN chmod -R 777 / && \
# #     chmod -R 755 /etc /var /tmp
# USER mpiuser

#mpiexec -np 4 nrniv -mpi -python batchRun_mpi.py
#test neuron
#python3 -c "import neuron; neuron.test(); quit()"
# Use a base image
FROM ubuntu:20.04

WORKDIR /opt

# Set noninteractive installation mode and timezone
ENV DEBIAN_FRONTEND noninteractive
ENV TZ=America/Los_Angeles

# Install all necessary packages in one step, excluding python3-openssl and python3-tk
RUN apt-get update && apt-get install -y \
    autoconf automake gcc g++ make gfortran wget curl libevent-dev hwloc libhwloc-dev pandoc \
    libfabric-dev libpsm-infinipath1-dev libpsm2-dev librdmacm-dev libibverbs-dev libslurm-dev \
    build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
    llvm xz-utils tk-dev libffi-dev liblzma-dev git \
    locales vim ssh emacs aptitude xterm iputils-ping net-tools screen graphviz tzdata \
    libgraphviz-dev pkg-config expat && \
    apt-get clean all && rm -rf /var/lib/apt/lists/*

# Neuron Dependencies as a separate step
RUN apt-get update && apt-get install -y \
    libx11-dev git bison flex automake libtool libxext-dev \
    python3-dev xfonts-100dpi cython3 libopenmpi-dev python3-scipy make zlib1g-dev && \
    apt-get clean all && rm -rf /var/lib/apt/lists/*

# Set environment variables
ENV PATH="/usr/local/bin:/usr/bin:/bin:/app"
ENV LD_LIBRARY_PATH="/usr/local/lib"

# Install Python 3.7
RUN mkdir ~/python37 && \
    cd ~/python37 && \
    wget https://www.python.org/ftp/python/3.7.12/Python-3.7.12.tgz && \
    tar -xf Python-3.7.12.tgz && \
    cd Python-3.7.12 && \
    ./configure --enable-optimizations --enable-shared && \
    make -j$(nproc) && \
    make install

# Create a symbolic link to the Python 3.8 binary, and check the Python version
RUN ln -s /usr/bin/python3 /usr/bin/python
RUN ln -sf /usr/local/bin/python3.7 /usr/bin/python
RUN python --version && which python

# Install python3-openssl and python3-tk
RUN apt-get update && apt-get install -y python3-openssl python3-tk && \
    apt-get clean all && rm -rf /var/lib/apt/lists/*

# Install MPICH
ENV MPICH_VERSION=4.1.1
ENV PREFIX="$HOME/mpich2"
RUN echo "Installing MPICH version ${MPICH_VERSION} to ${PREFIX}..."

# Keep the container running
#RUN sleep infinity

# Notes:
#--with-device=ch3:nemesis && \ # Nemesis is particularly effective for intra-node (within the same node) communication, making it beneficial for multi-processor or multi-core platforms where shared memory communication can be optimized.
#--with-device=ch4 OFI is optimized for both intra-node and inter-node (between nodes) communication, making it suitable for large-scale distributed systems like Perlmutter at NERSC.
RUN wget http://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz -P /tmp/ && \
    tar xf /tmp/mpich-${MPICH_VERSION}.tar.gz -C /tmp/ && \
    cd /tmp/mpich-${MPICH_VERSION} && \
    ./configure --prefix=${PREFIX} --datarootdir=${PREFIX}/share \
    --enable-fortran=no \
    --with-device=ch4:ofi && \
    make -j$(nproc) && \
    make install && \
    rm -rf /tmp/mpich-${MPICH_VERSION} /tmp/mpich-${MPICH_VERSION}.tar.gz

# Set environment variables for MPICH
ENV PATH="${PREFIX}/bin:$PATH"
ENV LD_LIBRARY_PATH="${PREFIX}/lib:$LD_LIBRARY_PATH"
ENV MODULEPATH="${PREFIX}/share/modulefiles:$MODULEPATH"

# Manual creation of a simple environment module file
RUN mkdir -p ${PREFIX}/share/modulefiles && \
    echo '#%Module1.0' > ${PREFIX}/share/modulefiles/mpich && \
    echo 'proc ModulesHelp { } {' >> ${PREFIX}/share/modulefiles/mpich && \
    echo '    puts stderr "This module sets up the environment for MPICH ${MPICH_VERSION}."' >> ${PREFIX}/share/modulefiles/mpich && \
    echo '}' >> ${PREFIX}/share/modulefiles/mpich && \
    echo 'module-whatis "Sets up the environment for MPICH ${MPICH_VERSION}"' >> ${PREFIX}/share/modulefiles/mpich && \
    echo "set prefix ${PREFIX}" >> ${PREFIX}/share/modulefiles/mpich && \
    echo 'prepend-path PATH $prefix/bin' >> ${PREFIX}/share/modulefiles/mpich && \
    echo 'prepend-path LD_LIBRARY_PATH $prefix/lib' >> ${PREFIX}/share/modulefiles/mpich && \
    echo 'prepend-path MANPATH $prefix/share/man' >> ${PREFIX}/share/modulefiles/mpich && \
    echo 'prepend-path CPATH $prefix/include' >> ${PREFIX}/share/modulefiles/mpich && \
    echo 'prepend-path PKG_CONFIG_PATH $prefix/lib/pkgconfig' >> ${PREFIX}/share/modulefiles/mpich

# Installation Checks
# Check if mpiexec and mpicc are available
RUN command -v mpiexec && command -v mpicc
# Verify the environment module file is present
RUN test -f ${PREFIX}/share/modulefiles/mpich
# Check if the module file paths are correct
RUN grep "${PREFIX}" ${PREFIX}/share/modulefiles/mpich

# Create a simple MPI program for testing
RUN echo '#include <mpi.h>\n#include <stdio.h>\nint main(int argc, char** argv) {\nMPI_Init(NULL, NULL);\nint world_size;\nMPI_Comm_size(MPI_COMM_WORLD, &world_size);\nint world_rank;\nMPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\nprintf("Hello world from rank %d out of %d processors\\n", world_rank, world_size);\nMPI_Finalize();\nreturn 0;\n}' > test_mpi.c
# Compile the simple MPI program
RUN mpicc -o test_mpi test_mpi.c
# Run the simple MPI program
RUN mpiexec -n 2 ./test_mpi

# Clean up
RUN rm test_mpi.c test_mpi

# Keep the container running
#RUN sleep infinity

# # Install necessary packages for building NEURON
# RUN apt-get update && apt-get install -y \
#     wget curl git \
#     cmake bison flex \
#     build-essential \
#     libncurses-dev \
#     libreadline-dev \
#     libx11-dev \
#     python3-dev python3-pip \
#     libopenmpi-dev

# RUN pip install 'cython<3'

# Download and install InterViews
RUN wget https://neuron.yale.edu/ftp/neuron/versions/v7.7/iv-19.tar.gz && \
    tar xzf iv-19.tar.gz && \
    cd iv-19 && \
    ./configure && \
    make -j$(nproc) && \
    make install

# Download and install NEURON
RUN wget https://neuron.yale.edu/ftp/neuron/versions/v7.7/nrn-7.7.tar.gz && \
    tar xzf nrn-7.7.tar.gz && \
    cd nrn-7.7 && \
    ./configure --with-iv --with-paranrn --with-nrnpython=python3 && \
    make -j$(nproc) && \
    make install && \
    cd src/nrnpython && \
    python3 setup.py install

# Set environment variables
ENV PATH="/usr/local/nrn/x86_64/bin:$PATH" \
    PYTHONPATH="/usr/local/nrn/x86_64/lib/python:$PYTHONPATH"

# Cleanup
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Keep the container running
#RUN sleep infinity

# Install Python packages
RUN python -m pip install --upgrade pip
RUN python -m pip install \
    numpy matplotlib h5py ruamel.yaml jupyter jupyter_server scipy six \
    bluepyopt \
    netpyne Pillow 'bokeh<3' contextlib2 cycler fonttools future jinja2 kiwisolver lfpykit \
    markupsafe matplotlib-scalebar meautility packaging pandas pyparsing pytz pyyaml schema tornado 'inspyred >= 1.0.2' \
    wheel setuptools setuptools_scm scikit-build ipython packaging 'pytest<=8.1.1' pytest-cov find_libpython \
    'pyneuroml[combine]>=1.1.5' tables
    
#install mpi4py
RUN python -m pip install mpi4py

# Create a writable directory for Fontconfig cache and other usage
RUN mkdir /opt/fontconfig /app && \
    chmod -R 777 /opt/fontconfig /app

# Set environment variable for Fontconfig
ENV FONTCONFIG_PATH=/opt/fontconfig

# Set environment variables for MPICH
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
ENV MPIR_CVAR_CH3_NOLOCAL=0
ENV MPIR_CVAR_CH4_NOLOCAL=0
ENV RDMAV_FORK_SAFE=1

WORKDIR /app

# Set default command
CMD ["bash"]

# Create a non-root user
# RUN apt-get update && apt-get install -y passwd
# RUN apt-get clean && rm -rf /var/lib/apt/lists/*
# #RUN groupadd -r mpiuser && useradd -r -g mpiuser -m -d /home/mpiuser -s /bin/bash mpiuser
# ENV PATH="$PATH:/sbin:/usr/sbin:usr/local/sbin"
# RUN adduser --disabled-password --gecos '' --shell /bin/bash --uid 500 mpiuser
# RUN chown -R mpiuser:mpiuser /app \ 
#     /boot  /lib    /lib64   /media  /opt  /sbin  /usr \
#     /dev   /home  /lib32  /libx32  /mnt  /run   /srv  /root

# #simulate NERSC permissions
# # RUN chmod -R 777 / && \
# #     chmod -R 755 /etc /var /tmp
# USER mpiuser

#mpiexec -np 4 nrniv -mpi -python batchRun_mpi.py
#test neuron
#python3 -c "import neuron; neuron.test(); quit()"